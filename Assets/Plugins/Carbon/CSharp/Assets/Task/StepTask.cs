using System;

namespace Carbon
{
	/// <summary>
	/// TaskSequence which processes tasks step by step.ParallelTask
	/// </summary>
	public sealed class StepTask : TaskSequence
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Constructor
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public StepTask() { }
		public StepTask(TaskSequence taskSequence) : base(taskSequence) { }

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Public Method
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Process the task sequence step by step.
		/// </summary>
		public void Process()
		{
			ProcessNextTask();
		}

		/// <summary>
		/// Process the task sequence step by step.
		/// </summary>
		public void Process(Action onComplete)
		{
			Push(onComplete);
			ProcessNextTask();
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Private Method
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Event on task complete.
		/// </summary>
		private void ProcessNextTask()
		{
			Dequeue().Call(ProcessNextTask);
		}
	}
}