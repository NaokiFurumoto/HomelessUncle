using System;
using System.Collections.Generic;

namespace Carbon
{
	/// <summary>
	/// TaskSequence
	/// </summary>
	public class TaskSequence
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Private Field
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// The queue of tasks
		/// </summary>
		private readonly Queue<Action<Action>> m_TaskQueue = new Queue<Action<Action>>();

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Property
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// タスク数
		/// </summary>
		public int Count { get { return m_TaskQueue.Count; } }
		/// <summary>
		/// 空か
		/// </summary>
		public bool IsEmpty { get { return m_TaskQueue.IsEmpty(); } }

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Constructor
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public TaskSequence() { }
		public TaskSequence(TaskSequence other)
		{
			foreach (var task in other.m_TaskQueue) {
				m_TaskQueue.Enqueue(task);
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Public Method
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Push task with completion callback.
		/// </summary>
		public void Push(Action<Action> task)
		{
			if (task == null) {
				return;
			}
			m_TaskQueue.Enqueue(task);
		}

		/// <summary>
		/// Push tasks with completion callbacks.
		/// </summary>
		public void Push(params Action<Action>[] taskList)
		{
			foreach (var task in taskList) {
				if (task == null) {
					continue;
				}
				m_TaskQueue.Enqueue(task);
			}
		}

		/// <summary>
		/// Push task without completion callback.
		/// </summary>
		public void Push(Action action)
		{
			if (action == null) {
				return;
			}
			Push(next => {
				action.Call();
				next();
			});
		}

		/// <summary>
		/// Clear tasks.
		/// </summary>
		public virtual void Clear()
		{
			m_TaskQueue.Clear();
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Protected Method
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Dequeue
		/// </summary>
		protected Action<Action> Dequeue()
		{
			return m_TaskQueue.DequeueOrDefault();
		}
	}
}